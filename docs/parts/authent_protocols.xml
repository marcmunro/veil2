<appendix id="authent_protocols">
  <title><literal>Veil2</literal> Authentication Protocols</title>
  <sect1 id="shared_session_management">
    <title>Shared Session Authentication</title>
    <sect2>
      <title>The Problem Space</title>
      <para>
	Shared sessions are database connections that are shared
	amongst many users.  Typically these are used by web
	application servers.  When a user does something that requires
	a database interaction, a database connection is released from
	the pool, temporarily assigned to that user's session, and
	when the interaction is complete, returned to the pool.
      </para>
      <para>
	A further complication is that many applications will perform
	multiple parallel database operations for a page, each
	requiring its own connection.
      </para>
      <para>
	What this means is that:
	<itemizedlist>
	  <listitem>
	    database connections are not dedicated to individual users;
	  </listitem>
	  <listitem>
	    each user may use a different connection for each interaction;
	  </listitem>
	  <listitem>
	    multiple connections may be in use simultaneously for a user;
	  </listitem>
	  <listitem>
	    usage of connections for a given user is not serialized.
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	What the last item means is that the order of requests arriving
	at the database server may not, due to network lag and
	application task handling, be the same order in which the user
	session initiated those requests.
      </para>
    </sect2>
    <sect2>
      <title>Requirements</title>
      <para>
	There is only one fundamental requirement of a session
	management protocol.  That is, that the session should know at
	all times which user is accessing the system.
      </para>
      <para>
	What this means is:
	<itemizedlist>
	  <listitem>
	    it must identify and authenticate each user;
	  </listitem>
	  <listitem>
	    it must know when the user is finished;
	  </listitem>
	  <listitem>
	    it must make it as difficult as possible to impersonate a
	    user, or otherwise gain their access rights.
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	A further requirement is that it must all be done with as
	little overhead as possible.
      </para>
    </sect2>
    <sect2>
      <title>The Threat Space</title>
      <para>
	Ordinarily, web systems aim to protect themselves from
	user-space only.  It is assumed that we are protected from bad
	actors in the network layer by appropriate use of TLS, and
	that if the server is compromised the game is over anyway.
      </para>
      <para>
       However, by placing our primary security in the database
       server, and the database server in a secured part of our
       network, we can actually hope to protect ourselves against
       compromised application servers.
      </para>
      <para>
	If this sounds paranoid, then consider this:
	<itemizedlist>
	  <listitem>
	    it is the job of a security implementer to be paranoid;
	  </listitem>
	  <listitem>
	    many data breaches have arisen from hackers having
	    long-term access to compromised servers;
	  </listitem>
	  <listitem>
	    even the paranoid may have enemies.
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	Given that with <literal>Veil2</literal> we
	<emphasis>can</emphasis> attempt to protect ourselves from a
	compromised server, we should try to do so.
      </para>
     </sect2>
    <sect2>
      <title>Properties of the Solution Space</title>
      <para>
	This is what <literal>Veil2</literal> provides,
	out-of-the-box, for session management:
	<itemizedlist>
	  <listitem>
	    a default authentication system that is not terrible (bcrypt);
	  </listitem>
	  <listitem>
	    extensible authentication methods (build your own);
	  </listitem>
	  <listitem>
	    minimal transmission of authentication tokens;
	  </listitem>
	  <listitem>
	    resistance to fishing for user-ids;
	  </listitem>
	  <listitem>
	    a <ulink
	    url="https://en.wikipedia.org/wiki/Replay_attackhttps://en.wikipedia.org/wiki/Replay_attack">replay
	    attack</ulink>-resistant protocol.
	  </listitem>
	</itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>The Protocol</title>
      <para>
	There are 3 functions that your application server's session
	management must call:
	<itemizedlist>
	  <listitem>
	    <literal>
	      <link linkend="func_create_session">create_session();</link>
	    </literal>
	  </listitem>
	  <listitem>
	    <literal>
	      <link linkend="func_open_connection">open_connection();</link>
	    </literal>
	  </listitem>
	  <listitem>
	    <literal>
	      <link linkend="func_close_connection">close_connection().</link>
	    </literal>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	And the calling protocol has four distinct stages.
      </para>
      <sect4>
	<title>Begin New Session</title>
	<para>
	  We begin a session by calling
	  <literal>create_session()</literal>.  This returns a
	  <literal>session_id</literal> and
	  <literal>session_token</literal> which we must record and
	  use on subsequent calls.
	</para>
	<para>
	  Sessions remain active, with minimal overhead, until they
	  time-out.  The timeout period is defined in the
	  <literal>veil2.system_parameters</literal> table, in the
	  parameter called <literal>shared session timeout</literal>.
	  Each time a connection is opened, the timeout is reset.  If
	  a session times-out while a connection is active, the
	  connection will be unaffected, but re-connections will no
	  longer be possible.
	</para>
	<para>
	</para>
      </sect4>
      <sect4>
	<title>Authenticate New Session</title>
	<para>
	  Having created a session and been given a
	  <literal>session_id</literal> by
	  <literal>create_session()</literal>, we authenticate and
	  open the session by calling
	  <literal>open_connection()</literal> with parameters
	  appropriate to the chosen authentication method.  If this
	  succeeds, our connection is considered open and we can start
	  executing queries.
	</para>
	<para>
	  What this means is that it takes 2 database round-trips
	  before we can begin executing queries on the user's behalf.
	  While this may seem an unreasonable overhead, it only occurs
	  when we first create a session.  Subsequent usage requires
	  only a single round-trip, which, given that the database has
	  to be informed of which user is connected, seems like a
	  pretty reasonable and unavoidable overhead.
	</para>
      </sect4>
      <sect4>
	<title>Close Connection</title>
	<para>
	  When we are done and are ready to return the database
	  connection to the pool for use by another user, we call
	  <literal>close_connection()</literal>.  This is important.
	  If you do not do this everything will continue to work, but
	  the connection can be taken over by another user, thereby
	  inheriting the previous user's access rights.
	</para>
      </sect4>
      <sect4>
	<title>Re-open Connection</title>
	<para>
	  As long as a session has not timed-out, new connections can
	  be opened using that session.  These re-opened connections
	  do not require re-authentication using the original
	  credentials.  Instead we use a proof that the session is
	  being used by the original authenticator.  This may be
	  computationally cheaper than providing the original
	  credentials, but more importantly it means that those
	  credentials are not being continually re-transmitted.  To
	  prevent replay attacks we use a <ulink
	  url="https://en.wikipedia.org/wiki/Cryptographic_nonce">nonce</ulink>
	  as part of the authentication token.  Any attempt to re-use
	  a nonce will be noticed and the connection attempt will
	  fail.
	</para>
	<para>
	  Note that multiple simultaneous connections can be opened on
	  the same session.  The only requirement is that each is
	  opened with its own nonce, and that the nonces are
	  more-or-less sequentially numbered.
	</para>
      </sect4>
    </sect2>
    <sect2>
      <title>Function Calling Minutiae</title>
      <sect3>
	<title><literal>create_session()</literal></title>
	<para>
	  We provide the following parameters to
	  <literal>create_session()</literal>:
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>username</literal>;
	      </para>
	      <para>
		This is a string that uniquely identifies the user
		within the context provided by the context parameters.
		This is converted into an
		<literal>accessor_id</literal> by the function
		<literal><link
		linkend="func_get_accessor">veil2.get_accessor()</link></literal>
		which you must define as part of your implementation.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>authent_type</literal>;
	      </para>
	      <para>
		This is the name of an authentication method recorded
		in <literal> <link
		linkend="entity_authentication_type">veil2.authentication_types</link></literal>,
		and for which an authentication function has been
		provided.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>context_type_id</literal>;
	      </para>
	      <para>
		This is an integer identifying the type of context
		that the user is authenticating within.  See the <link
		linkend="veil_demo"><literal>veil2_demo</literal></link>
		for how this is used to enable different users to
		belong to different companies.
	      </para>
	      <para>
		This will match a scope_type as defined in
		<literal><link
		linkend="entity_scope_type">veil2.scope_types</link></literal>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>context_id</literal>.
	      </para>
	      <para>
		This is an integer identifying, in combination with
		<literal>context_type_id</literal>, the context that
		the user is authenticating within.  See the <link
		linkend="veil_demo"><literal>veil2_demo</literal></link>
		for how this is used to enable different users to
		belong to different companies.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  The function always appears to succeed, and it returns the
	  following result columns: 
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>session_id;</literal>.
	      </para>
	      <para>
		This is an integer that identifies the session for
		your connections.  If your parameters successfully
		identified a legitimate user, a record with this key
		will have been inserted into
		<literal>veil2.sessions</literal>.  The user will not
		be able to see this record, or determine that it is
		absent.
	      </para>
	      <para>
		The caller will need to provide this value as a
		parameter in subsequent calls to
		<literal>open_connection()</literal>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>session_token;</literal>.
	      </para>
	      <para>
		This is a randomly generated
		<ulink
		    url="https://en.wikipedia.org/wiki/Base64">base64</ulink>
		text value that the caller must use in subsequent,
		continuation, calls to
		<literal>open_connection()</literal>.
	      </para>
	      <para>
		Possession of this token is assumed to be proof that
		the holder is the same user that authenticated
		themselves to us.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>session_supplemental.</literal>.
	      </para>
	      <para>
		This is a string containing extra information that
		some user-provided authentication methods may
		require.  This is for your use.  Be imaginative.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect3>
      <sect3>
	<title><literal>open_connection()</literal>
	Authentication</title>
	<para>
	  This call is used to authenticate a user to a previously
	  created session.  It must be the next database call after
	  <literal>create_session()</literal> has returned.
	</para>
	<para>
	  You may wonder why this is not simply rolled into the
	  <literal>create_session()</literal> call, thereby reducing
	  the number of round trips.  The answer is that some
	  authentication methods will require initial tokens to be
	  created before allowing authentication to proceed.  An
	  example of this would be <ulink
	  url="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">a
	  Diffie–Hellman Key Exchange</ulink>-based protocol.  If you
	  implement such a thing please <link
	  linkend="contact">contact</link> the author who would love
	  to see it.
	</para>
	<para>
	  The parameters to this function are:
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>session_id</literal>;
	      </para>
	      <para>
		This will be the value returned from
		<literal>create_session()</literal>. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>nonce</literal>;
	      </para>
	      <para>
		This will be an integer value.  You should
		allocate this sequentially for each session, though it
		does not need to start at 1.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>authent_token</literal>.
	      </para>
	      <para>
		This is a string value.  Its value will depend on the
		authentication method being used.  Ideally that
		authentication method will not require a plaintext
		password to be sent.  Note that the bcrypt
		authentication method <emphasis>does</emphasis>
		require the plaintext password.  The only advantage of
		this over the plaintext authentication method is that
		the password cannot be easily extracted from the
		database.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  This function returns the following result columns:
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>success;</literal>.
	      </para>
	      <para>
		A boolean.  The meaning should be obvious.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>errmsg</literal>.
	      </para>
	      <para>
		If authentication failed, this provides additional
		information to the caller.  The possible values are:
		<itemizedlist>
		  <listitem>
		    <para>
		      <literal>AUTHFAIL</literal>;
		    </para>
		    <para>
		      This means that the user could not be
		      authenticated.  This might be because the user
		      and context for the session were invalid or
		      because <literal>authent_token</literal> was
		      invalid.  It could even mean that you haven't
		      called <literal>create_session()</literal> but
		      if not, where did you get the value for
		      <literal>session_id</literal>?
		    </para>
		    <para>
		      More information about the failure is recorded
		      in the postgres logs, but this is not available
		      to the user session.
		    </para>
		    <para>
		      If <literal>authent_token</literal> was invalid,
		      at least for the <literal>bcrypt</literal>
		      authentication method, you can retry with the
		      correct token.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      <literal>EXPIRED</literal>;
		    </para>
		    <para>
		      This means that the session has timed-out.  You
		      will need to create a new session using
		      <literal>create_session()</literal>.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      <literal>NONCEFAIL</literal>.
		    </para>
		    <para>
		      This should not be possible in this, the
		      authentication call.
		    </para>
		  </listitem>
		</itemizedlist>
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect3>
      <sect3>
	<title><literal>open_connection()</literal> Continuation</title>
	<para>
	  Once a session has been successfully authenticated,
	  subsequent calls to <literal>open_connection()</literal> are
	  considered to be continuations.  Multiple open connections
	  for a session may be used simultaneously, but they must each
	  use their own nonce values.
	</para>
	<para>
	  The parameters to this function are:
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>session_id</literal>;
	      </para>
	      <para>
		This is just as for the Authentication version of this
		function call.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>nonce</literal>;
	      </para>
	      <para>
		This integer must be previously unused for this
		session, and should be allocated sequentially in
		ascending order.  They may arrive out of sequence but
		not by more than a value of 32.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>authent_token</literal>.
	      </para>
	      <para>
		This is created from the value of
		<literal>authent_token</literal> returned from the
		<literal>create_session()</literal> call that created
		the session, along with the nonce.  It should be
		created as follows:
		<itemizedlist>
		  <listitem>
		    <para>
		      Concatenate <literal>authent_token</literal>
		      with the lower-case hexadecimal representation
		      of the nonce parameter.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      Create a <ulink
		      url="https://en.wikipedia.org/wiki/SHA-1">sha-1</ulink> 
		      hash of the concatenated string.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      Encode the hash as a base64 string.
		    </para>
		  </listitem>
		</itemizedlist>
	      </para>
	      <para>
		The <literal>open_connection()</literal> function will
		create the same encoded hash internally and check that
		it matches.  If it does, we can be sure that the
		caller is in possession of the original
		<literal>authent_token</literal> from the creation of
		the session.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  This function returns the following result columns:
	  <itemizedlist>
	    <listitem>
	      <para>
		<literal>success;</literal>.
	      </para>
	      <para>
		A boolean.  The meaning should be obvious.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<literal>errmsg</literal>.
	      </para>
	      <para>
		This provides similar results to those for
		authentication.
		<itemizedlist>
		  <listitem>
		    <para>
		      <literal>AUTHFAIL</literal>;
		    </para>
		    <para>
		      Assuming your session was previously valid, you
		      got the value of
		      <literal>authent_token</literal> wrong.  You can
		      retry, but you will need a new nonce value.
		    </para>
		    <para>
		      More information about the failure is recorded
		      in the postgres logs, but this is not available
		      to the user session.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      <literal>EXPIRED</literal>;
		    </para>
		    <para>
		      This means that the session has timed-out.  You
		      will need to create a new session using
		      <literal>create_session()</literal>.
		    </para>
		  </listitem>
		  <listitem>
		    <para>
		      <literal>NONCEFAIL.</literal>;
		    </para>
		    <para>
		      You have attempted to re-use a nonce that was
		      previously used.  Try again with a new nonce.
		      Try adding 4 or more to the latest
		      successfully-used value.
		    </para>
		  </listitem>
		</itemizedlist>
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect3>
      <sect3>
	<title><literal>close_connection()</literal></title>
	<para>
	  This function has no parameters and always returns a boolean
	  true.
	</para>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="dedicated_session_management">
    <title>Dedicated Database Sessions</title>
    <para>
      If you are accessing your secured database using dedicated
      database connections, things are much simpler than for <link
      linkend="shared_session_management">shared sessions</link>.
      With a dedicated database connection you are the sole user of
      the connection, and there is no need for a complex
      create-open-close protocol dance to prevent your credentials
      from being used by someone else.
    </para>
    <para>
      Typically, dedicated database connections will be used for
      running reports or ad-hoc queries, and each user will have their
      own database credentials (typically username and password).
    </para>
    <para>
      <literal>Veil2</literal> associates a database user with its own
      accessor record by recording the database username in the
      <literal>veil2.accessors</literal> record's
      <literal>username</literal> column.
    </para>
    <para>
      For dedicated sessions, you just have to tell
      <literal>Veil2</literal> to load your accessor privileges by
      making a single, parameterless function call:
      <programlisting>
select veil2.hello();
      </programlisting>
    </para>
  </sect1>
  <sect1>
    <title>Resetting Cached Privileges</title>
    <para>
      Sometimes you may need changes to a user's privileges to happen
      immediately, rather than the next time that they connect.  In
      this case, your session should call <link
      linkend="func_reload_connection_privs()"><literal>veil2.reload_connection_privs()</literal></link>.
    </para>
    <para>
      This will rarely be needed in a shared session environment as
      connections are usually only held for as long as it takes to
      perform a query, and the next connection will reload the
      privileges anyway.
    </para>
    <para>
      You would use Postgres' <literal>listen/notify</literal>
      mechanism to inform the affected session that a reload was needed.
    </para>
  </sect1>
  <sect1>
    <title>Custom Database Sessions</title>
    <para>
      If the built-in session management does not work for you, you
      can always build your own. 
    </para>
  </sect1>
</appendix>
