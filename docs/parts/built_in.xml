<chapter id="Implementation">
  <title>The Veil2 Implementation: What You Need To Know</title>
  <para>
    Although <literal>Veil2</literal> is built to be customized and
    modified by you, it comes with a number of built-in features,
    functionality and assumptions.  These exist to provide a sane
    starting point for your implementation.
  </para>
  <para>
    For most database implementations only a relatively small number
    of customizations will be needed.  These are primarily in order to
    integrate <literal>Veil2</literal> with your database
    implementation.  For those systems that have more complex
    requirements, almost all of <literal>Veil2</literal> is tweakable
    by providing your own overriding views and functions for those
    provided by <literal>Veil2</literal>.
  </para>
  <para>
    This section provides details of the underlying
    <literal>Veil2</literal> implementation, intended to help you with
    your customization needs.
  </para>
  <sect1 id="user_customizations">
    <title>User Customizations</title>
    <para>
       As a PostgreSQL extension, allowing customization of
       <literal>Veil2</literal> is something of a challenge.  The
       issue is that <literal>Veil2</literal>'s own database objects
       are expected by PostgreSQL to not be user-modifiable.  This is
       so that extensions can be upgraded in place using standard
       extension mechanisms; and so that backups taken using pg_dump
       can allow a database to be restored by simply re-installing the
       extension.  What this means is that any modifications you make
       to database objects that are part of the
       <literal>Veil2</literal> extension will be lost if you restore
       from a pg_dump backup, or if you upgrade the
       <literal>Veil2</literal> extension. 
    </para>
    <para>
      It is therefore vital that any user modifications are to objects
      that are not owned by the extension. To deal with this, we limit
      the ways in which customizations to <literal>Veil2</literal> are
      made: 
    </para>
    <sect2 id="custom_data">
      <title>Customized Data</title>
      <para>
	PostgreSQL allows tables in extensions to contain user-data.
	Such tables must be registered with the extension mechanism
	using
	<literal>pg_catalog.pg_extension_config_dump()</literal>.
	This allows a <literal>where clause</literal> to be defined
	which specifies how to identify user-provided entries.
      </para>
      <para>
	All <literal>Veil2</literal> tables are managed in this way,
	so you can safely add your own data to them.  What you cannot
	do is extend those tables in other ways such as by adding
	extra columns or constraints.
      </para>
    </sect2>
    <sect2 id="custom-functions">
      <title>Customized Functions</title>
      <para>
	Although most <literal>Veil2</literal> functions are not
	expected to be modified by the user, a small number must
	provide functionality that is specific to your database
	schema.  This means that some functionality must be
	user-provided.
      </para>
      <para>
	The mechanism provided by <literal>Veil2</literal> to allow
	for user-provided functionality is to allow users to define
	their own replacements for built-in <literal>Veil2</literal>
	functions.  These replacement functions are owned by you
	and are <emphasis role="bold">not</emphasis> part of the
	<literal>Veil2</literal> extension.
      </para>
      <para>
	To define your own version of a <literal>Veil2</literal>
	function, you simply create a new function, with the same
	function signature, in the <literal>veil2</literal> schema,
	with the function name prepended with
	<literal>my_</literal>.
      </para>
      <para>
	The following example is from the
	<literal>veil2_demo</literal> extension and redefines the
	<literal>veil2.get_accessor()</literal> function:
	<programlisting>
create or replace
function veil2.my_get_accessor(
    username in text,
    context_type_id in integer,
    context_id in integer)
  returns integer as
$$
declare
  _result integer;
begin
  select party_id
    into _result
    from demo.parties_tbl p
   where p.party_name = username
     and p.org_id = context_id
     and context_type_id = 4;  -- Logins are in org context
   return _result;
end;
$$
language plpgsql security definer stable leakproof;
	</programlisting>
	This provides an <literal>accessor_id</literal> for a user
	based on their username and the	<link
	linkend="authentication_context">authentication context</link>
	for which they are logging-in.
      </para>
      <para>
	Note that in use, your user-provided function will replace the
	<literal>Veil2</literal> system-provided function.  This means
	that the name of the function when it is executed will not
	include the <literal>my_</literal> prefix.  You should not
	therefore use the function name as a prefix to a parameter
	name in order to disambiguate a reference (see <ulink
	url="https://www.postgresql.org/docs/current/plpgsql-implementation.html">this
	link</ulink> for more details).
      </para>
    </sect2>
    <sect2 id="custom-views">
      <title>Customized Views</title>
      <para>
	Much of the heavy-lifting of managing users' privileges is
	done through views and materialized views.  By redefining
	views, we can alter functionality and expand the range of data
	upon which we operate.
      </para>
      <para>
	For instance, the <literal>veil2.superior_scopes</literal>
	view identifies the hierarchy of scopes for which privilege
	promotions are available.  If we have a database which
	provides scopes for projects and for organizations, the scope
	promotion for a project might be to the organization which
	owns the project.  A role assigned in a project context might
	contain the privilege to view basic organization data, and
	this privilege would need to be promoted to apply at the
	organization level.  In order to perform this promotion,
	<literal>Veil2</literal> needs to know which projects belong
	to which organizations.  This is what the
	<literal>superior_scopes</literal> view is intended to
	provide, but can only do so if user-defined.
      </para>
      <para>
	Just as with functions, views owned by the
	<literal>Veil2</literal> extension cannot be safely
	redefined, but again, as with functions, we can create
	alternative views and have <literal>Veil2</literal> manage them.
      </para>
      <para>
	To override the built-in version of a <literal>Veil2</literal>
	view, you simply need to define a new view, in the
	<literal>veil2</literal> schema, with the prefix
	<literal>my_</literal>.  So, to define new functionality for
	the view <literal>veil2.superior_scopes</literal>, you would
	create a new view
	<literal>veil2.my_superior_scopes</literal>.
      </para>
      <para>
	As an example, here is the definition for
	<literal>veil2.my_superior_scopes</literal> from the demo:
	<programlisting>
create or replace
view veil2.my_superior_scopes (
  scope_type_id, scope_id,
  superior_scope_type_id, superior_scope_id
) as
select 4, party_id,  -- Promote org to corp scope
       3, corp_id
  from demo.parties_tbl -- No join needed to scopes as party_id == scope_id
 where party_type_id = 2
union all
select 4, party_id,  -- Promote root orgs within corps to corp scope
       3, party_id
  from demo.parties_tbl
 where party_type_id = 2
   and org_id = 100
   and party_id != 100
union all
select 4, party_id,  -- Promotion of org to higher org
       4, org_id
  from demo.parties_tbl
 where party_type_id = 2
   and party_id != org_id
union all
select 5, s.scope_id,   -- Project to corp promotions
       3, p.corp_id
  from demo.projects p
 inner join veil2.scopes s
    on s.project_id = p.project_id
union all
select 5, s.scope_id,   -- Project to org promotions
       4, p.org_id
  from demo.projects p
 inner join veil2.scopes s
    on s.project_id = p.project_id;
	</programlisting>
      </para>
    </sect2>
    <sect2>
      <title>Managing User-Provided Functionality</title>
      <para>
	To make user-provided functions and views take effect, they
	must be installed to replace the original system-provided
	version.  <literal>Veil2</literal> provides 5 functions for
	low-level management of user-provided functions and views:
	<itemizedlist>
	  <listitem>
	    <link linkend="func_install_user_functions"><literal>veil2.install_user_functions()</literal></link>
	    <para>
	      This function copies all user-provided functions over
	      their corresponding system-provided counterparts.  Before
	      doing this, it ensures that a backup copy of the original
	      system-provided function exists.  Any function defined
	      in the <literal>veil2</literal> schema with a name
	      beginning with <literal>my_</literal> that matches a
	      function without that prefix will be copied.
	    </para>
	    <para>
	      This function should be called after any modification of
	      your user-provided functions.  It is safe to call this
	      function any number of times.
	    </para>
	  </listitem>
	  <listitem>
	    <link linkend="func_restore_system_functions"><literal>veil2.restore_system_functions()</literal></link>
	    <para>
	      Should you need to restore original functions from their
	      backup copies you should call this function.  This
	      function exists primarily for use when upgrading the
	      <literal>Veil2</literal> extension, but if you have
	      mistakenly overwritten system-provided functionality
	      with a buggy <literal>my_xxxx()</literal> function you
	      should use this to restore the original functionality
	      before dropping or fixing your version.
	    </para>
	  </listitem>
	  <listitem>
	    <link linkend="func_install_user_views"><literal>veil2.install_user_views()</literal></link>
	    <para>
	      This installs user-provided views in the same way that
	      <literal>veil2.install_user_functions()</literal>
	      installs user-provided functions.
	    </para>
	    <para>
	      This function should be called after any modification of
	      your user-provided views.  It is safe to call this
	      function any number of times.
	    </para>
	  </listitem>
	  <listitem>
	    <link linkend="func_restore_system_views"><literal>veil2.restore_system_views()</literal></link>
	    <para>
	      Restores the original system-provided views from backups
	      made by <literal>veil2.install_user_views()</literal>.
	    </para>
	  </listitem>
	  <listitem id="use_func_init">
	    <link linkend="func_init"><literal>veil2.init()</literal></link>
	    <para>
	      This installs all user-provided views and functions and
	      also refreshes all materialized views.  Call this
	      function any time that you modify one of your
	      user-provided views or functions.  This will install
	      your latest versions and ensure that everything is ready
	      to go.  This function can safely be called any time that
	      you may doubt whether you have the latest versions of
	      your views and functions in use.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      <para>
	In addition to the manual mechanisms described above, all
	user-defined functions and views will be automatically 
	installed by <literal>Veil2</literal> when the system-provided
	<link
	    linkend="func_get_accessor"><literal>veil2.get_accessor()</literal></link>
	function is first run.
      </para>
      <para>
	This is provided primarily for the case when we restore from a
	<literal>pg_dump</literal>-based backup.  In such a case, the
	first attempt by a user to log in will call the
	system-provided version of this function.  The system-provided
	version of the function will only be in place during this
	initial call, and will have been replaced by the
	user-provided version on subsequent calls.
      </para>
    </sect2>
  </sect1>
  <sect1 id="authentication">
    <title>Authentication</title>
    <para>
      <literal>Veil2</literal> provides barely adequate password-based
      authentication using <literal>bcrypt</literal>, and the means to
      create your own better authentication methods.
    </para>
    <para>
      Authentication is performed by the <link
      linkend="func_authenticate"><literal>veil2.authenticate()</literal></link>
      function which is called from <link
      linkend="func_open_connection"><literal>veil2.open_connection()</literal></link>,
      one of the functions used in <link
      linkend="shared_session_management">Shared Session
      Authentication</link>.
    </para>
    <para>
      <literal>Veil2</literal> allows for new authentication methods
      to be defined by creating authentication functions that match
      the call signature of <link
      linkend="func_authenticate_bcrypt"><literal>veil2.authenticate_bcrypt()</literal></link>
      and recording them in <link
      linkend="entity_authentication_type"><literal>veil2.authentication_types</literal></link>.
    </para>
    <para>
      If your custom authentication mechanism requires 2 round-trips,
      you can send supplemental data to the client from <link
      linkend="func_create_session"><literal>veil2.create_session()</literal></link>
      by recording a value for <literal>supplemental_fn</literal> in
      the <literal>veil2.authentication_types</literal> entry.  This
      will be the name of a function which takes an
      <literal>accessor_id</literal> and
      <literal>session_token</literal> as parameters and returns
      another token which will be returned as the
      <literal>session_supplemental</literal> value from
      <literal>veil2.create_session()</literal>.
    </para>
    <para>
      It should be possible to implement most authentication methods
      using these 2 functions.  If you need anything more complex than
      this, you will have to create your own versions of the session
      management functions.
    </para>
  </sect1>
  <sect1 id="privileges_implementation">
    <title>Privileges</title>
    <para>
      <literal>Veil2</literal> is supplied with a base set of <link
      linkend="privileges">privileges</link>.  These are to manage
      access to core functionality, and to the built-in
      <literal>Veil2</literal> tables (which are themselves secured by
      <literal>Veil2</literal>).
    </para>
    <para>
      To allow for expansion of <literal>Veil2</literal>'s core set of
      privileges in future releases, you should start numbering your
      own privileges from 20.
    </para>
    <sect2 id="connect_privilege">
      <title>Connect Privilege</title>
      <para>
	<literal>Connect</literal> is a special built-in privilege
	with an important meaning.  This privilege allows a user to
	create a database session (either <link
	linkend="dedicated_session_management">dedicated</link> or
	<link linkend="shared_session_management">shared</link>) and
	load other privileges into the session tables.  Without this
	privilege, a user will be able to load no other privileges and
	will therefore have no access rights at all.
      </para>
      <para>
	The <literal>connect</literal> privilege is not intended to be
	provided by any roles other than the
	<link linkend="connect_role"><literal>connect</literal></link>
	role, and is the only privilege not provided by the <link
	linkend="superuser_role"><literal>superuser</literal></link>
	role. 
      </para>
      <para>
	Restricting the use of the <literal>connect</literal>
	privilege in this way means that you can disable a user by
	simply revoking their <literal>connect</literal> role, and
	that you can re-allow it by re-assigning that role: you don't
	need to revoke <emphasis role="bold">all</emphasis> of a
	user's roles in order to disable their access.  This is
	intended to make user and role management easier.
      </para>
    </sect2>
    <sect2 id="become_user_privilege">
      <title>Become User Privilege</title>
      <para>
	This privilege allows an already authenticated user to
	effectively become another user, with that user's access
	rights.
      </para>
      <para>
	This is primarily intended for testing and verifying
	functionality.  If a user complains that they cannot access
	something, or that something does not work properly, then by
	becoming that user you can investigate the problem in a
	realistic manner without having to ask them to lend you their
	session or, worse, their authentication credentials.
      </para>
      <para>
	To become a different user you use the function <link
	linkend="func_become_user"><literal>veil2.become_user()</literal></link>,
	which will only succeed if you have the <literal>become
	user</literal> privilege in the scope of, or a superior scope
	to, their authentication context.
      </para>
      <para>
	Note that you cannot use
	<literal>veil2.become_user()</literal> to gain access rights
	that you do not already have: your session's privileges will
	become those of the user that you become, minus any privileges
	that they have and you do not (this is the mathematical
	intersection of the sets of your privileges and theirs). 
      </para>
    </sect2>
  </sect1>
  <sect1 id="roles_implementation">
    <title>Roles</title>
    <para>
      <literal>Veil2</literal> is supplied with a small set of
      built-in <link linkend="roles">roles</link>.  To allow for
      expansion of <literal>Veil2</literal>'s built-in roles in future
      releases, you should start numbering your own roles from 5.
    </para>
    <para>
      Roles have 2 attributes that require some explanation:
      <itemizedlist>
	<listitem>
	  <para>
	    <literal>implicit</literal>;
	  </para>
	  <para>
	    Roles marked as implicit are intended to not be assigned
	    to accessors and do not appear in the set of roles
	    implicitly mapped to the <literal>superuser</literal> role.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <literal>immutable</literal>;
	  </para>
	  <para>
	    Immutable roles are intended to be function-level roles
	    only.  They should not have other roles assigned to them.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <sect2 id="connect_role">
      <title>The Connect Role</title>
      <para>
	The <literal>connect</literal> role is provided by
	<literal>Veil2</literal> and is intended to be the only role
	that provides the <link
	linkend="connect_privilege"><literal>connect</literal></link>
	privilege.  Users need this role in both their authentication
	and session contexts (or a superior one such as global
	context) in order to establish a session.
      </para>
      <para>
	This role has no other privileges, as supplied, and should
	not be assigned any.
      </para>
    </sect2>
    <sect2 id="superuser_role">
      <title>The Superuser Role</title>
      <para>
	The <literal>superuser</literal> role is system-provided, and
	unmodifiable.  It provides every non-implicit role and every
	privilege except <literal>connect</literal>.  This is built in
	to the implementation (in <literal><link
	linkend="view_all_role_roles">veil2.all_role_roles</link></literal>)
	and are not modifiable through <literal><link
	linkend="entity_role_privilege">veil2.role_privileges</link></literal>
	and <literal><link
	linkend="entity_role_role">veil2.role_roles</link></literal>.
      </para>
    </sect2>
    <sect2 id="personal_context_role">
      <title>The Personal Context Role</title>
      <para>
	This role is implicitly assigned to each accessor (via
	<literal><link
		     linkend="view_all_accessor_roles_plus">veil2.all_accessor_roles_plus</link></literal>)
	when their session is established.  As supplied it has no
	privileges.
      </para>
      <para>
	It may initially seem odd that there is a <link
	linkend="roles">role</link> with the same name as a <link
	linkend="security-contexts">security context</link> but here
	is the reasoning.  The only privileges that apply in your
	<literal>personal scope</literal> are those that are assigned
	in <literal>personal context</literal> and this is done
	through a single, implied, role assignment.  We could have
	named that role <quote><literal>role that is assigned only in
	personal context</literal></quote> but it isn't really a
	better name so <quote><literal>personal
	context</literal></quote> it is.
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title id="physical_authentication_context">Authentication Contexts</title>
    <para>
      As described in the concepts section, having distinct <link
      linkend="authentication_context">authentication contexts</link>
      means that you can have distinct sets of usernames for different
      groupings of users.  Typically this would be for different
      organizations based on some sort of organization context type.
    </para>
    <para>
      If you don't need this functionality you can skip this section
      and create the simplest possible
      <literal><link
		   linkend="func_get_accessor">my_get_accessor()</link></literal>
      function, something like this:
      <programlisting>
create or replace
function veil2.my_get_accessor(
    username in text,
    context_type_id in integer,
    context_id in integer)
  returns integer as
$$
declare
  _result integer;
begin
  select user_id
    into _result
    from my_users
   where user_name = username;
   -- We could choose to ensure that context_type_id = 1 and
   -- context_id = 0, but instead we just ignore those parameters.
  return _result;
end;
$$
language plpgsql security definer stable leakproof;
	  
      </programlisting>
    </para>
    <para>
      If your application serves a number of distinct customers, each
      effectively having their own web site, then the authentication
      context will be provided by the login page for that web site.
      For example, if your customers are:
      <itemizedlist spacing="compact">
	<listitem>Alicecorp;</listitem>
	<listitem>Bobcorp;</listitem>
	<listitem>Carolcorp.</listitem>
      </itemizedlist>
      And the login pages are:
      <itemizedlist spacing="compact">
	<listitem><literal>
	  https://myveilprotectedsite/Alicecorp/login;
	</literal></listitem>
	<listitem><literal>
	  https://myveilprotectedsite/Bobcorp/login;
	</literal></listitem>
	<listitem><literal>
	  https://myveilprotectedsite/Carolcorp/login.
	</literal></listitem>
      </itemizedlist>
      Then each login page will provide different context data for the
      authentication calls.  Assuming that we have defined a corp
      context with a <literal>context_type_id</literal> of 3, and
      that the <literal>accessor_ids</literal> for AliceCorp, BobCorp,
      and CarolCorp are 42, 43, and 44 respectively, then our
      <literal>veil2.create_session()</literal> calls for each of the
      login pages will be as follows:
      <itemizedlist spacing="compact">
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Alicecorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 42);	    
	  </programlisting>
	</listitem>
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Bobcorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 43);	    
	  </programlisting>
	</listitem>
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Carolcorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 44);	    
	  </programlisting>
	</listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Associating Accessors With Their Authentication Context</title>
      <para>
	The association between an accessor and their authentication
	context is entirely user-defined.  <literal>Veil2</literal>
	relies on the <literal>veil2.my_get_accessor()</literal>
	function to return an accessor_id for a given combination of
	username and authentication context.  For an example of this,
	you should look at the <literal>veil2_demo</literal>
	(following the text <quote><literal>STEP 3</literal></quote>
	in the file <literal>veil2_demo--&lt;version&gt;.sql</literal>.
      </para>
    </sect2>
  </sect1>
  <sect1 id="role_assignment_contexts">
    <title>Role Assignment and Contexts</title>
    <para>
      Each role assignment in <literal>Veil2</literal> happens within
      a specific assignment context.  The assignment may be explicit,
      as it is when roles are assigned to accessors in <link
      linkend="entity_accessor_role"><literal>veil2.accessor_roles</literal></link>
      or implicit as is the case for the <link
      linkend="personal_context_role"><literal>personal
      context</literal></link> role.
    </para>
    <sect2 id="new_role_assignment_types">
      <title>Creating New Role Assignment Mechanisms</title>
      <para>
	One of the coolest things about <literal>Veil2</literal> is
	that you can create your own role assignment mechanisms.  You
	do this by redefining <link
	linkend="view_all_accessor_roles"><literal>veil2.all_accessor_roles</literal></link>.
	This view returns all role assignments in all contexts other
	than personal context which is handled by <literal><link
	linkend="view_all_accessor_roles_plus">veil2.all_accessor_roles_plus</link></literal>).
	You add new mechanisms by adding extra unions to the base
	query against the <literal>veil2.accessor_roles</literal>
	table.
      </para>
      <para>
	For instance, to add an implicit global context role
	assignment of role <literal>67</literal> to all accessors
	whose username begins with <literal>M</literal> (for reasons
	that make no sense whatsoever, but nicely illustrate the
	flexibility this provides) you would define your version of
	the view like this:
	<programlisting>
create or replace
view veil2.my_all_accessor_roles (
  accessor_id, role_id, context_type_id, context_id
) as
select accessor_id, role_id,
       context_type_id, context_id
  from veil2.accessor_roles
 union all
select accessor_id, role_id, 1, 0
  from veil2.accessors
 where lower(username) like 'm%';
	</programlisting>
      </para>
      <para>
	As a more realistic example let's add, additionally, the
	<literal>project member</literal> role (which we'll give
	role_id 68) in the project context to all accessors who are
	recorded as team members in the
	<literal>project_members</literal> table:
	<programlisting>
create or replace
view veil2.my_all_accessor_roles (
  accessor_id, role_id, context_type_id, context_id
) as
select accessor_id, role_id,
       context_type_id, context_id
  from veil2.accessor_roles
 union all
select accessor_id, 67, 1, 0
  from veil2.accessors
 where lower(username) like 'm%'
 union all
select accessor_id, 68, 5, project_id -- project context type is 5
  from project_members; 
	</programlisting>
      </para>
    </sect2>
  </sect1>
  <sect1 id="physical_session_context">
    <title>Session Contexts</title>
    <para>
      As described in <link linkend="session_context">session
      contexts</link> in the concepts section, a user's session
      context need not be the same as their authentication context.
      The user-provided function <literal><link
      linkend="func_get_accessor">my_get_accessor()</link></literal>
      is used to determine the accessor_id for a user based on a
      username and a context.  This context, ordinarily - see
      Separating Login and Session Contexts below), will be the
      session context.  Your <literal>my_get_accessor()</literal>
      function may use the context parameters as it sees fit: if you
      require a global authentication context, the parameters can be
      ignored; or it can require the supplied context to be the
      authentication context; or it can require that the supplied
      context is related to the authentication context (eg a child
      context of the authentication context).  What it chooses to do is
      entirely up to your implementation.
    </para>
    <para>
      Note that in order to successfully authenticate, the user must
      have <literal><link
      linkend="connect_privilege">connect</link></literal> privilege in
      a scope equal or superior to the session context.
    </para>
    <sect2 id="login_context">
      <title>Separating Login and Session Contexts</title>
      <para>
	In order to let privileged users work in session contexts that
	are unrelated to their authentication contexts,
	<literal>Veil2</literal> optionally allows the session context
	for a session to be provided explicitly to the <literal><link
	linkend="func_create_session">veil2.create_session()</link></literal>
	and <literal><link
	linkend="func_create_session">veil2.hello()</link></literal>
	functions.
      </para>
      <para>
	The user must have <literal>connect</literal> privilege in the
	scope of both the accessor's authentication context and the
	chosen session context.
      </para>
      <para>
	This is described in more detail in the <link
	linkend="authent_protocols">Authentication Protocols</link>
	appendix.
      </para>
    </sect2>
  </sect1>
  <sect1 id="physical_role_mapping">
    <title>Role Mappings and Mapping Contexts</title>
    <para>
      As described in <link linkend="role_mapping">the concepts
      section</link>, <literal>Veil2</literal> allows roles to be
      mapped to other roles, and for those role mappings to be
      different for different users.
    </para>
    <para>
      The purpose of this is to allow different groups of users to be
      able to separately manage their own role->role mappings.  For
      instance, if one company allows Customer Service Reps to provide
      financial incentives to their customers and another does not,
      the first company might assign the <literal>Manage
      Discounts</literal> role to the <literal>Customer Service
      Rep</literal> role, while the other would not.
    </para>
    <para>
      If your <literal>Veil2</literal> protected system is providing
      distinct virtual databases for a number of independent clients,
      this is an important feature.
    </para>
    <para>
      <literal>Veil2</literal> allows this by providing different
      mapping contexts to apply to different groups of users.  The
      mapping context that applies for a given role assignment depends
      on:
      <itemizedlist>
	<listitem>
	  <para>
	    the <literal>mapping context target scope type</literal>
	    system parameter;
	  </para>
	  <para>
	    This parameter (recorded in
	    <literal>veil2.system_parameters</literal>) specifies
	    scope type that will apply to mapping contexts.  By
	    default this is <literal>global scope</literal> which
	    means that <emphasis>all</emphasis> accessors will see
	    the same role->role mappings.  If you don't need different
	    mapping contexts, you should leave this setting alone.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    the context of the role assignment;
	  </para>
	  <para>
	    Each role is assigned in a specific context.  The mapping
	    context that applies to a role in a given assignment
	    context will be the context of the first superior scope
	    that matches our <literal>mapping context target scope
	    type</literal>.
	  </para>
	  <para>
	    For example, imagine a scope hierarchy that goes from
	    corporation, to division, to department, to project.  If
	    our mapping context is at the division level, then the
	    <literal>Project Manager</literal> role assigned for a
	    project within department S, division South, would have
	    a mapping context of department S.  This would mean that
	    the Project Manager role in department S might have
	    different sub-roles from the same Project Manager role in
	    Department Y.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    the user's <link
	    linkend="physical_session_context">session
	    context</link>.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </sect1>
</chapter>
