<chapter id="Implementation">
  <title>The Veil2 Implementation: What You Need To Know</title>
  <para>
    Although <literal>Veil2</literal> is built to be customized and
    modified by you, it comes with a number of built-in assumptions,
    rules and limitations.  These exist to provide a sane starting
    point for your implementation.
  </para>
  <para>
    For most database implementations only a relatively small number
    of customizations will be needed.  These are primarily in order to
    integerate <literal>Veil2</literal> with your database
    implementation.  For those systems that have more complex
    requirements, almost all of <literal>Veil2</literal> is tweakable
    by providing your own overriding views and functions for those
    provided by <literal>Veil2</literal>.
  </para>
  <para>
    This section provides details of the underlying
    <literal>Veil2</literal> implementation, intended to help you with
    your customization needs.
  </para>
  <sect1 id="privileges_implementation">
    <title>Privileges</title>
    <para>
      <literal>Veil2</literal> is supplied with a base set of <link
      linkend="privileges">privileges</link>.  These are to manage
      access to core functionality, and to the built-in
      <literal>Veil2</literal> tables (which are themselves secured by
      <literal>Veil2</literal>).
    </para>
    <para>
      To allow for expansion of <literal>Veil2</literal>'s core set of
      privileges in future releases, you should start numbering your
      own privileges from 20.
    </para>
    <sect2 id="connect_privilege">
      <title>Connect Privilege</title>
      <para>
	<literal>Connect</literal> is a special built-in privilege
	with an important meaning.  This privilege allows a user to
	create a database session (either <link
	linkend="dedicated_session_management">dedicated</link> or
	<link linkend="shared_session_management">shared</link>) and
	load other privileges into the session tables.  Without this
	privilege, a user will be able to load no other privileges and
	will therefore have no access rights at all.
      </para>
      <para>
	The <literal>connect</literal> privilege is not intended to be
	provided by any roles other than the
	<link linkend="connect_role"><literal>connect</literal></link>
	role, and is the only privilege not provided by the <link
	linkend="superuser_role"><literal>superuser</literal></link>
	role. 
      </para>
      <para>
	Restricting the use of the <literal>connect</literal>
	privilege in this way means that you can disable a user by
	simply revoking their <literal>connect</literal> role, and
	that you can re-allow it by re-assigning that role: you don't
	need to revoke <emphasis role="bold">all</emphasis> of a
	user's roles in order to disable their access.  This is
	intended to make user and role management easier.
      </para>
    </sect2>
    <sect2 id="become_user_privilege">
      <title>Become User Privilege</title>
      <para>
	This privilege allows an already authenticated user to
	effectively become another user, with that user's access
	rights.
      </para>
      <para>
	This is primarily intended for testing and verifying
	functionality.  If a user complains that they cannot access
	something, or that something does not work properly, then by
	becoming that user you can investigate the problem in a
	realistic manner without having to ask them to lend you their
	session or, worse, their authentication credentials.
      </para>
      <para>
	To become a different user you use the function
	<literal>veil2.become_user()</literal>, which will only
	succeed if you have the <literal>become user</literal>
	privilege in the scope of, or a superior scope to, their
	authentication context.
      </para>
      <para>
	Note that you cannot use
	<literal>veil2.become_user()</literal> to gain access rights
	that you do not already have: your session's privileges will
	become those of the user that you become, minus any privileges
	that they have and you do not (this is the mathematical
	intersection of the sets of your privileges and theirs).
      </para>
    </sect2>
  </sect1>
  <sect1 id="roles_implementation">
    <title>Roles</title>
    <para>
      Talk about implicit and immutable.  Also the 3 provided roles.
      Start allocating user roles from role_id 5.
    </para>
    <para>
    </para>
    <para>
    </para>
    <sect2 id="connect_role">
      <title>The Connect Role</title>
      <para>
	The <literal>connect</literal> role is provided by
	<literal>Veil2</literal> and is intended to be the only role
	that provides the <link
	linkend="connect_privilege"><literal>connect</literal></link>
	privilege.  Only users who have been assigned this role will
	be able to authenticate within a session.
      </para>
      <para>
	This role has no other privileges, by default and should
	not be assigned any.
      </para>
    </sect2>
    <sect2 id="superuser_role">
      <title>The Superuser Role</title>
      <para>
	The <literal>superuser</literal> role is system-provided, and
	essentially unmodifiable.  It provides every role
	TODO: wise words about this.
      </para>
      <para>
      </para>
    </sect2>
    <sect2 id="personal_context_role">
      <title>The Personal Context Role</title>
      <para>
	TODO: wise words about this.
      </para>
      <para>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title id="physical_authentication_context">Authentication
    Contexts</title>
    <para>
      The <link linkend="veil2-concepts">concepts section</link>
      describes <link linkend="authentication_context">authentication
      contexts</link> as a means to associate different users with
      different organizations.
    </para>
    <para>
      If you don't need this functionality you can skip to the <link
      linkend="simplest_get_accessor">end</link> of this section,
      and create the simplest possible
      <literal>my_get_accessor()</literal> function.
    </para>
    <para>
      If your application serves a number of distinct customers, each
      effectively having their own web site, then the authentication
      context will be provided by the login page for that web site.
      For example, if your customers are:
      <itemizedlist spacing="compact">
	<listitem>Alicecorp;</listitem>
	<listitem>Bobcorp;</listitem>
	<listitem>Carolcorp.</listitem>
      </itemizedlist>
      And the login pages are:
      <itemizedlist spacing="compact">
	<listitem><literal>
	  https://myveilprotectedsite/Alicecorp/login;
	</literal></listitem>
	<listitem><literal>
	  https://myveilprotectedsite/Bobcorp/login;
	</literal></listitem>
	<listitem><literal>
	  https://myveilprotectedsite/Carolcorp/login.
	</literal></listitem>
      </itemizedlist>
      Then each login page will provide different context data for the
      authentication calls.  Assuming that we have defined a corp
      context with a <literal>context_type_id</literal> of 3, and
      that the <literal>accessor_ids</literal> for AliceCorp, BobCorp,
      and CarolCorp are 42, 43, and 44 respectively, then our
      <literal>veil2.create_session()</literal> calls for each of the
      login pages will be as follows:
      <itemizedlist spacing="compact">
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Alicecorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 42);	    
	  </programlisting>
	</listitem>
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Bobcorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 43);	    
	  </programlisting>
	</listitem>
	<listitem>
	  <literal>
	    https://myveilprotectedsite/Carolcorp/login;
	  </literal>
	  <programlisting>
select * from veil2.create_session(&lt;username&gt;, 4, 44);	    
	  </programlisting>
	</listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Associating Accessors With Their Authentication Context</title>
      <para>
	The association between an accessor and their authentication
	context is entirely user-defined.  <literal>Veil2</literal>
	relies on the <literal>veil2.my_get_accessor()</literal>
	function to return an accessor_id for a given combination of
	username and authentication context.  For an example of this,
	you should look at the <literal>Veil2</literal> demo
	(following the text <quote><literal>STEP 3</literal></quote>
	in the file <literal>demo/demo.sql</literal>).
      </para>
      <para id="simplest_get_accessor">
	Note that many <literal>Veil2</literal> implementations will
	not need to use seperate authentication contexts.  In such a
	case your <literal>veil2.my_get_accessor()</literal> function
	should simply insist on the context being global
	(<literal>context_type_id = 1</literal> and
	<literal>context_id = 0</literal>).  Something like this:
	<programlisting>
create or replace
function veil2.my_get_accessor(
    username in text,
    context_type_id in integer,
    context_id in integer)
  returns integer as
$$
declare
  _result integer;
begin
  select user_id
    into _result
    from my_users
   where user_name = username;
   -- We could choose to ensure that context_type_id = 1 and
   -- context_id = 0, but instead we just ignore those parameters.
  return _result;
end;
$$
language plpgsql security definer stable leakproof;
	  
	</programlisting>
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Assignment Contexts</title>
    <para>
      Each role assignment in <literal>Veil2</literal> happens within
      a specific assignment context.
    </para>
  </sect1>
  <sect1 id="physical_role_mapping">
    <title>Role Mappings and Mapping Contexts</title>
    <para>
      As described in <link linkend="role_mapping">the concepts
      section</link>, <literal>Veil2</literal> allows roles to be
      mapped to other roles, and for those role mappings to be
      different for different users.
    </para>
    <para>
      The purpose of this is to allow different groups of users to be
      able to separately manage their own role->role mappings.  For
      instance, if one company allows Customer Service Reps to provide
      financial incentives to their customers and another does not,
      the first company might assign the <literal>Manage
      Discounts</literal> role to the <literal>Customer Service
      Rep</literal> role, while the other would not.
    </para>
    <para>
      If your <literal>Veil2</literal> protected system is providing
      distinct virtual databases for a number of independent clients,
      this is an important feature.
    </para>
    <para>
      <literal>Veil2</literal> allows this by providing different
      mapping contexts to apply to different groups of users.  The
      mapping context that applies for a given role assignmen depends
      on:
      <itemizedlist>
	<listitem>
	  <para>
	    the <literal>mapping context target scope type</literal>
	    system parameter;
	  </para>
	  <para>
	    This parameter (recorded in
	    <literal>veil2.system_parameters</literal>) specifies
	    scope type that will apply to mapping contexts.  By
	    default this is <literal>global scope</literal> which
	    means that <emphasis>all</emphasis> accessors will see
	    the same role->role mappings.  If you don't need different
	    mapping contexts, you should leave this setting alone.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    the context of the role assignment;
	  </para>
	  <para>
	    Each role is assigned in a specific context.  The mapping
	    context that applies to a role in a given assignment
	    context will be the context of the first superior scope
	    that matches our <literal>mapping context target scope
	    type</literal>.
	  </para>
	  <para>
	    For example, imagine a scope hierarchy that goes from
	    corporation, to division, to department, to project.  If
	    our mapping context is at the division level, then the
	    <literal>Project Manager</literal> role assigned for a
	    project within department S, division South, would have
	    a mapping context of department S.  This would mean that
	    the Project Manager role in department S might have
	    different sub-roles from the same Project Manager role in
	    Department Y.
	  </para>
	</listitem>
	<listitem>
	  TODO: DISTINGUISH BETWEEN AUTHENTICATION AND LOGIN CONTEXTS 
	  <para>
	    the user's <link
	    linkend="physical_authentication_context">authentication
	    context</link>.
	  </para>
	  <para>
	    A user's authentication context determines which role
	    assignments are considered valid.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </sect1>
  <sect1>
    <title>Built-In Security Contexts</title>
  </sect1>
  <sect1>
    <title>Login Contexts</title>
  </sect1>
  <sect1>
    <title>Built-In Roles</title>
  </sect1>
</chapter>
