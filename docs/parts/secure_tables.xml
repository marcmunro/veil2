<sect1 id="secure_tables">
  <title>Secure Your Tables (STEP 10)</title>
  <para>
    At last we get to secure something.
  </para>
  <para>
    Each of your user-facing relations should be secured.  Even if you
    think that *all* users should have access to something, it does
    little harm to secure it.  It makes for a more consistent
    implementation and it shows that the relation has not simply been
    forgotten.  The overhead of doing this is small.
  </para>
  <sect2>
    <title>Doing It</title>
    <para>
      Securing a table is pretty simple.  First you enable row
      level security for that table, and then you define policies on
      the table for select, insert, update and delete.  The following
      is the definition for the select policy on projects from the
      demo.  See STEP 10 in file <literal>demo/demo.sql</literal>.
      <programlisting>
alter table demo.projects enable row level security;

create policy parties_tbl__select
    on demo.parties_tbl
   for select
 using (   veil2.i_have_global_priv(17)
        or veil2.i_have_priv_in_scope(17, 3, corp_id)
        or veil2.i_have_priv_in_scope(17, 4, org_id)
        or veil2.i_have_priv_in_scope(17, 4, party_id) -- View the org itself
        or veil2.i_have_personal_priv(17, party_id)
	or (    party_type_id = 2    -- View an org that owns a project
	    and veil2.i_have_priv_in_scope(23, 4, party_id)));
      </programlisting>
    </para>
    <para>
      Note that we check for <literal>select projects</literal>
      privilege in many different ways.  This is because there are
      multiple ways that we could have been assigned the privilege.
      The most interesting test is the last one, which tests for
      <literal>select orgs</literal> rather than <literal>select
      parties</literal>.  This is to allow someone with that privilege
      to view the party record for the org that is the owner of some
      other record.  In this case, the org will be the owner of a
      project, and a user assigned <literal>select orgs</literal> in
      the context of that project will have that privilege
      automatically promoted to org scope allowing them to see the
      party that owns the project, but no other parties.
    </para>
    <para>
      Note that the demo only implements the select policy.
    </para>
  </sect2>
  <sect2>
    <title>The <literal>Veil2</literal> tables</title>
    <para>
      Each <literal>Veil2</literal> table is protected with a select
      privilege.  It is generally assumed that no-one will be granted
      direct access to <literal>Veil2</literal> tables, though this
      will not be the case if you use <literal>Veil2</literal>'s role
      implementation as the demo does.  In this case you should add
      whatever extra security policies and privileges you need.
    </para>
    <para>
      DO NOT GRANT ANY ACCESS OTHER THAN SELECT TO A
      <literal>VEIL2</literal> TABLE WITHOUT FIRST ADDING SUITABLE
      PRIVILEGES AND SECURITY POLICIES.
    </para>
  </sect2>
  <sect2>
    <title>In Summary</title>
    <para>
      Create and enable security policies for each user-facing table.
    </para>
  </sect2>
</sect1>
