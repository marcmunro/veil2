<chapter id="setup_accessors">
  <title>Link Your Users To <literal>Veil2</literal>'s Accessors (STEP
  4)</title>
  <para>
    It is likely that your application is going to have tables that
    represent users.  The next stage of your implementation is going
    to be to link your users with <literal>Veil2</literal>'s
    accessors.
  </para>
  <para>
    Look for STEP 4 in the file
    <literal>veil2_demo--&lt;version&gt;.sql</literal>.
  </para>
  <para>
    You will need to create links between each of your user tables
    and the <literal><link
    linkend="entity_accessor">veil2.accessors</link></literal>
    table.
  </para>
  <para>
    You will create foreign-key constraints back to those tables,
    and create triggers to keep the mapping and
    <literal>accessors</literal> tables in step with changes in your
    users tables.
  </para>
  <sect1>
    <title>Create A Mapping Table With Foreign-Key Links to Your Users</title>
    <para>
      You will create a mapping table, ideally in the
      <literal>veil2</literal> schema, that will consist of foreign key
      references to both the <literal>veil2.accessors</literal> table
      and whatever tables from your database that need you need to link
      to.  You will also create indexes for performance, and
      foreign-key references back to your users tables.
    </para>
    <para>
      Note that as a simplification, the demo chooses to use the
      <literal>accessor_id</literal> from the
      <literal>accessors</literal> table as the primary key for its
      <literal>parties</literal> table.
    </para>
  </sect1>
  <sect1>
    <title>Copy Existing User Records</title>
    <para>
      Create copies of the existing user records in
      <literal>veil2.accessors</literal>.  Note that you will need to
      create records in both the
      <literal>veil2.accessors</literal> and the new mapping table for
      each users record.  See the demo.
    </para>
  </sect1>
  <sect1>
    <title>Copy Existing Authentication Details</title>
    <para>
      What we need to do is populate the 
      <literal><link
		   linkend="entity_authentication_detail">veil2.authentication_details</link></literal>
      table from the authentication details (passwords) in your source
      database.  Depending on how secure your existing system is, this
      may prove to be difficult.  For instance if you use a simple
      salted hash to store your passwords, you will be unable to
      generate a bcrypt password from it.  In this case you have
      2 basic choices:
      <itemizedlist>
	<listitem>
	  <para>
	    implement your current password management scheme in
	    <literal>Veil2</literal>;
	  </para>
	  <para>
	    In this case you will be able to simply copy the current
	    hashed passwords.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    implement a password migration scheme.
	  </para>
	  <para>
	    You will create bcrypt tokens from the users' passwords,
	    as they enter them into your system. 
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </sect1>
  <sect1>
    <title>Create Referential Integrity Triggers</title>
    <para>
      When new users are created, updated or deleted in your users
      table, we need the <literal>veil2.accessors</literal> records to
      reflect this.  Triggers on your users tables must be created to
      achieve this.  
    </para>
  </sect1>
  <sect1>
    <title>Ensure Authentication Changes Are Propagated</title>
    <para>
      Ideally, on an ongoing basis, all authentication details will be
      kept solely in <literal>veil2.authentication_details</literal>
      and use of the original users tables for this will be
      deprecated.  Until this can be completed though, you may still
      be allowing passwords etc to be created in your original users
      tables.
    </para>
    <para>
      To ensure that password changes are propagated to
      <literal>Veil2</literal>, triggers should be placed on the
      source tables which will cause the appropriate modifications to
      be made to <literal>veil2.authentication_details</literal>.
      Again, examples can be found in the demo code.
    </para>
  </sect1>
</chapter>
