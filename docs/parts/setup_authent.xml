<sect1 id="setup_authent">
  <title>Setting Up Authentication and Session Management</title>
  <para>
    <literal>Veil2</literal> provides built-in mechanisms for
    authentication and session management.  You can choose to use
    these as they are, extend them, or replace them entirely.
  </para>
  <para>
    This section provides an introduction to what is needed,
    references to more detailed explanations and a final, simple, list
    of <link linkend="authent_what">actions</link> you need to take or
    consider.
  </para>
  <para>
    The demo does very little in performing this step, but you may
    find some useful hints there.  Look for "STEP 3" in the file
    <literal>demo/demo.sql</literal>.
  </para>
  <sect2 id="authentication">
    <title>Authentication</title>
    <para>
      Authenticating users is hard.  There are many different ways to
      do it.  <literal>Veil2</literal> provides 2 default
      password-based mechanisms for authentication, and a mechanism
      for extensibility.  The built-in methods are:
      <itemizedlist>
	<listitem>
	  <para>
	    plaintext;
	  </para>
	  <para>
	    This is provided simply for testing.  With plaintext
	    authorization, a password is provided which is simply
	    checked against a copy stored in
	    <link linkend="entity_authentication_detail"><literal>veil2.authentication_details</literal></link>.
	  </para>
	  <para>
	    By default, this authentication mechanism is disabled.  It
	    is weak and insecure.  DO NOT USE IT.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    bcrypt.
	  </para>
	  <para>
	    This is a password-based scheme, but the password is
	    stored as a bcrypted hash.  Creating this hash is slow,
	    which means that it is very difficult to determine, by
	    brute-force, the password that matches the hash.  This
	    mechanism should be be considered barely adequate from a
	    security standpoint as it still requires the plaintext
	    password to be sent to the database for checking.
	  </para>
	  <para>
	    This is good enough for most systems but a long way from
	    ideal.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      New authentication methods should be created by creating new
      authentication functions and new records in <link
      linkend="entity_authentication_type"><literal>veil2.authentication_types</literal></link>.
    </para>
  </sect2>
  <sect2>
    <title>Associate Your Users With Their Authentication
    Contexts</title>
    <para>
      If your users do not all authenticate in the same context you
      will need to redefine the <literal><link
      linkend="view_accessor_contexts">veil2.accessor_contexts</link></literal>
      view.  This view associates accessors with <link
      linkend="authentication_context">authentication
      contexts</link>.  Step 3 in the demo provides a good example of
      this.
    </para>
  </sect2>
  <sect2>
    <title>Define Your <literal>get_accessor()</literal> Function</title>
    <para>
      For user authentication purposes <literal>Veil2</literal> needs
      the <literal>accessor_id</literal> for the <literal><link
      linkend="entity_accessor">accessors</link></literal> record that
      represents the user.  Since <literal>Veil2</literal> does not
      itself store usernames, email addresses and whatever else that
      might be used to uniquely identify a user in their <link
      linkend="authentication_context">authentication context</link>,
      we need a function that returns an
      <literal>accessor_id</literal> for a username.  The
      <literal>
	<link linkend="func_get_accessor">get_accessor()</link></literal>
      function is that function. 
    </para>
  </sect2>
  <sect2 id="session_management">
    <title>Session Management</title>
    <para>
      There are 2 distinct types of sessions provided:
      <itemizedlist>
	<listitem>
	  <para>
	    shared-connection sessions;
	  </para>
	  <para>
	    These are used when a single database user account is used
	    to handle multiple connected users.  Each database
	    connection will typically be shared among many users
	    through some sort of connection-pooling system.  This is
	    the type of session generally used by web applications.
	  </para>
	  <para>
	    It is important with such systems that we can reliably
	    identify which user is connected, and that the privileges
	    of one user are not inadvertently transferred to another.
	    This means that when the connection starts to be used by a
	    new user there must be some form of secure identification
	    of the user.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    dedicated sessions.
	  </para>
	  <para>
	    These are typically used for reporting applications, where
	    each reporting user will have their own database account.
	    In this case, <literal>Veil2</literal> determines the
	    user's access rights based upon database roles, and there
	    is no need for further authentication - we assume that
	    database authentication is sufficient.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <sect3>
      <title>Shared-Connection Sessions</title>
      <para>
	Within a shared connection environment, such as provided by
	most web applications, a database connection will be shared
	amongst many users.  When the application needs to perform
	some database action on behalf of a user, the connection will
	be retrieved from the pool, and possibly re-initialized,
	before executing one or more queries on the user's behalf.
      </para>
      <para>
	Unless we provide the connection with extra information, the
	database cannot know which user it is executing queries for.
      </para>
      <para>
	<literal>Veil2</literal> provides 3 session management
	functions to identify and keep track of users:
	<itemizedlist>
	  <listitem><literal>veil2.create_session()</literal>;</listitem>
	  <listitem><literal>veil2.open_connection()</literal>;</listitem>
	  <listitem><literal>veil2.close_connection()</literal>.</listitem>
	</itemizedlist>
	Your application server must call
	<literal>create_session()</literal> to identify each new user,
	and <literal>open_connection()</literal> before the user begins
	issuing queries.  <literal>close_connection()</literal> should be
	called before returning the database connection to the pool.
      </para>
      <para>
	A detailed description of this can be found in the <link
	linkend="authent_protocols">Authentication Protocols</link>
	appendix, which describes the functions, their parameters, and
	describes error handling.
      </para>
      <para>
	
      </para>
    </sect3>
    <sect3>
      <title>Dedicated Sessions</title>
      <para>
	If you have users that connect directly to your database,
	perhaps through some reporting tool, you will want to set them
	up as users of dedicated sessions.
      </para>
      <para>
	This is done by providing the database username to a
	<literal><link linkedn="entity_accessor">veil2.accessors</link></literal>
	record.
      </para>
      <para>
	To begin a dedicated session after connecting to the database,
	the user must call <literal>veil2.hello()</literal>, which
	will return true if <literal>Veil2</literal> has successfully
	authenticated the user. 
	<programlisting>
select veil2.hello();
	</programlisting>
	If your reporting tool does not allow such function calls, you
	will need to create a view that calls it, which the reporting
	tool can call.  Something like this would work:
	<programlisting>
create or replace 
view session_start as 
select veil2.hello();
	</programlisting>
	  or, if you need the view to return no rows:
	<programlisting>
create or replace 
view session_start as 
  with session as (
  select 1 as result from veil2.hello()
  )
select * from session where result = 0;
	</programlisting>
	<para>
	  For an example of this, take a look at the
	  <literal>Veil2</literal> unit tests.  The database user
	  <literal>veil2_alice</literal> is set up as a dedicated
	  session user (as well as a shared session user).
	</para>
      </para>
    </sect3>
  </sect2>
  <sect2 id="authent_what">
    <title>In Summary</title>
    <itemizedlist>
      <listitem>
	<para>
	  For shared-session use, choose an authentication system.
	  You may need to implement it.  You should disable (in
	  <literal><link linkend="entity_authentication_type">veil2.authentication_types</link></literal>
	  the authentication systems you do not want to use. 
	</para>
      </listitem>
      <listitem>
	<para>
	  Redefine the <literal><link
	  linkend="view_accessor_contexts">accessor_contexts</link></literal>
	  view, if neccessary, to associate users with their <link
	  linkend="authentication_context">authentication
	  contexts</link>.
	</para>
      </listitem>
      <listitem>
	<para>
	  Implement <literal><link
	  linkend="func_get_accessor">get_accessor()</link></literal>
	  to retrieve <literal>accessor_id</literal>s based on
	  usernames or whatever.
	</para>
      </listitem>
      <listitem>
	<para>
	  For shared-session use, figure out how to implement the
	  shared session management protocol in your application
	  server(s). 
	</para>
      </listitem>
      <listitem>
	<para>
	  For dedicated sessions users, create
	  <literal>
	    <link linkend="entity_accessor">veil2.accessors</link></literal>
	  records.  Maybe create a view that calls
	  <literal><link linkend="func_hello">veil2.hello()</link></literal>. 
	</para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>


