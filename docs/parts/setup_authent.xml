<chapter id="setup_authent">
  <title>Setting Up Authentication and Session Management (STEP 3)</title>
  <para>
    <literal>Veil2</literal> provides built-in mechanisms for
    authentication and session management.  You can choose to use
    these as they are, extend them, or replace them entirely.
  </para>
  <para>
    Look for "STEP 3" in the file
    <literal>veil2_demo--&lt;version&gt;.sql</literal>.
  </para>
  <sect1>
    <title>Create Your Authentication Methods</title>
    <para>
      If you need an authentication method other than
      <literal>bcrypt</literal> you will need to define it as a type
      and then create authentication functions for it.
    </para>
    <para>
      New authentication methods should be created by creating new
      authentication functions and new records in <link
      linkend="entity_authentication_type"><literal>veil2.authentication_types</literal></link>.
    </para>
    <para>
      New authentication functionality is created by creating new
      functions with the same signature as <link
      linkend="func_authenticate_bcrypt"><literal>veil2.authenticate_bcrypt()</literal></link>.
    </para>
    <para>
      The <literal>Veil2</literal> demo chooses to use plaintext
      authentication which is a really terrible idea but makes for an
      easy implementation.  Don't do this.
    </para>
  </sect1>
  <sect1>
    <title>Associate Accessors And Authentication Contexts</title>
    <para>
      <literal>Veil2</literal> determines the authentication context
      for an accessor through the <literal><link
      linkend="view_accessor_contexts">veil2.accessor_contexts</link></literal>
      view.  Since the actual association between them is provided by
      your database, you must provide a custom version of this view
      (called <literal>veil2.my_accessor_contexts</literal>). 
    </para>
    <para>
      To make your version of the view take effect, as described <link
      linkend="use_func_init">here</link>, use the <literal><link
      linkend="func_init">veil2.init()</link></literal> function.
    </para>
    <para>
      Note that <literal><link
      linkend="func_implementation_status">veil2.implementation_status()</link></literal>
      will also install your user-defined functions and views as it
      itself calls <literal>veil2.init()</literal>.
    </para>
  </sect1>
  <sect1>
    <title>Define Your <literal>my_get_accessor()</literal> Function</title>
    <para>
      For user authentication purposes <literal>Veil2</literal> needs
      the <literal>accessor_id</literal> for the <literal><link
      linkend="entity_accessor">accessors</link></literal> record that
      represents the user.  Since <literal>Veil2</literal> does not
      itself store usernames, email addresses and whatever else that
      might be used to uniquely identify a user in their <link
      linkend="authentication_context">authentication context</link>,
      we need a function that returns an
      <literal>accessor_id</literal> for a username.  The
      <literal>
	<link linkend="func_get_accessor">get_accessor()</link></literal>
      function is that function.
    </para>
    <para>
      Your version of this function will be called
      <literal>veil2.my_get_accessor()</literal>.  As described above
      you make it current by calling <literal><link
      linkend="func_init">veil2.init()</link></literal>.
    </para>
  </sect1>
  <sect1>
    <title>Authentication</title>
    <para>
    </para>
  </sect1>
  <sect1 id="session_management">
    <title>Notes on Session Management</title>
    <para>
      If your application requires any special session management
      functionality, this is the time to create it.  There is little
      we can say here about what that functionality might be, as it
      will very much depend on your needs.  This section simply tries
      to provide some useful background information.
    </para>
    <para>
      There are 2 distinct types of sessions provided:
      <itemizedlist>
	<listitem>
	  <para>
	    shared-connection sessions;
	  </para>
	  <para>
	    These are used when a single database user account is used
	    to handle multiple connected users.  Each database
	    connection will typically be shared among many users
	    through some sort of connection-pooling system.  This is
	    the type of session generally used by web applications.
	  </para>
	  <para>
	    It is important with such systems that we can reliably
	    identify which user is connected, and that the privileges
	    of one user are not inadvertently transferred to another.
	    This means that when the connection starts to be used by a
	    new user there must be some form of secure identification
	    of the user.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    dedicated sessions.
	  </para>
	  <para>
	    These are typically used for reporting applications, where
	    each reporting user will have their own database account.
	    In this case, <literal>Veil2</literal> determines the
	    user's access rights based upon database roles, and there
	    is no need for further authentication - we assume that
	    database authentication is sufficient.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <sect2>
      <title>Shared-Connection Sessions</title>
      <para>
	Within a shared connection environment, such as provided by
	most web applications, a database connection will be shared
	amongst many users.  When the application needs to perform
	some database action on behalf of a user, the connection will
	be retrieved from the pool, and possibly re-initialized,
	before executing one or more queries on the user's behalf.
      </para>
      <para>
	Unless we provide the connection with extra information, the
	database cannot know which user it is executing queries for.
      </para>
      <para>
	<literal>Veil2</literal> provides 3 session management
	functions to identify and keep track of users:
	<itemizedlist>
	  <listitem><literal>veil2.create_session()</literal>;</listitem>
	  <listitem><literal>veil2.open_connection()</literal>;</listitem>
	  <listitem><literal>veil2.close_connection()</literal>.</listitem>
	</itemizedlist>
	Your application server must call
	<literal>create_session()</literal> to identify each new user,
	and <literal>open_connection()</literal> before the user begins
	issuing queries.  <literal>close_connection()</literal> should be
	called before returning the database connection to the pool.
      </para>
      <para>
	A detailed description of this can be found in the <link
	linkend="authent_protocols">Authentication Protocols</link>
	appendix, which describes the functions, their parameters, and
	describes error handling.
      </para>
    </sect2>
    <sect2>
      <title>Dedicated Sessions</title>
      <para>
	If you have users that connect directly to your database,
	perhaps through some reporting tool, you will want to set them
	up as users of dedicated sessions.
      </para>
      <para>
	This is done by recording the database username in the
	<literal>username</literal> field of the <literal><link
	linkend="entity_accessor">veil2.accessors</link></literal>
	record.
      </para>
      <para>
	To begin a dedicated session after connecting to the database,
	the user must call <literal><link
	linkend="func_hello">veil2.hello()</link></literal>, which
	will return true if <literal>Veil2</literal> has successfully
	authenticated the user. 
	<programlisting>
select veil2.hello();
	</programlisting>
	If your reporting tool does not allow such function calls, you
	will need to create a view that calls it, which the reporting
	tool can call.  Something like this would work:
	<programlisting>
create or replace 
view session_start as 
select veil2.hello();
	</programlisting>
	  or, if you need the view to return no rows:
	<programlisting>
create or replace 
view session_start as 
  with session as (
  select 1 as result from veil2.hello()
  )
select * from session where result = 0;
	</programlisting>
      </para>
      <para>
	For an example of this, take a look at the
	<literal>Veil2</literal> unit tests (in file
	<literal>tests/test_session.sql</literal>).  The database
	user <literal>veil2_alice</literal> is set up as a dedicated
	session user (as well as a shared session user).
      </para>
    </sect2>
  </sect1>
</chapter>


