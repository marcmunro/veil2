<chapter id="superior_scopes">
  <title>Define Your Scope Hierarchy (STEP 6)</title>
  <para>
    In your database, you are likely to have a hierarchy of <link
    linkend="scopes">scopes</link>.  What this means is that one scope
    is contained within another.  For instance a project scope might be
    contained within the department scope of the department that owns
    the project.  This hierarchy is used in 2 ways:
    <itemizedlist>
      <listitem>
	for <link linkend="privilege-promotion">privilege
	promotions</link>;
      </listitem>
      <listitem>
	for determining access rights to data within inferior scopes.
      </listitem>
    </itemizedlist>
  </para>
  <para>
    Determining which scopes may be promoted to which other scopes is
    done through the <literal><link
    linkend="view_superior_scopes">superior_scopes</link></literal>
    view.  This identifies, for each scope, what directly superior
    scopes exist.  It does not identify global scope, and does not
    require a recursive query to identify grandparent scopes etc.
    These are handled elsewhere.
  </para>
  <sect1>
    <title>Customizing The <literal>superior_scopes</literal>View</title>
    <para>
      You will need to create a custom version of the <literal><link
      linkend="view_superior_scopes">superior_scopes</link></literal>
      view.  This is done (as described <link
      linkend="custom-views">here</link>) by creating an over-riding
      custom view named <literal>my_superior_scopes</literal>.
      The provided <literal>Veil2</literal> base version of this
      view is simply a placeholder.
    </para>
    <para>
      You will define this view as the union of a number of selects.
      Each select will represent a single type of superior scope.  The
      following example is from the demo.  See STEP 6 in the file
      <literal>demo/demo.sql</literal>.
      <programlisting>
create or replace
view veil2.my_superior_scopes (
  scope_type_id, scope_id,
  superior_scope_type_id, superior_scope_id
) as
select 4, party_id,  -- Promote org to corp scope
       3, corp_id
  from demo.parties_tbl -- No join needed to scopes as party_id == scope_id
 where party_type_id = 2
union all
select 4, party_id,  -- Promotion of org to higher org
       4, org_id
  from demo.parties_tbl
 where party_type_id = 2
   and party_id != org_id  -- Cannot promote to self
union all
select 5, s.scope_id,   -- Project to corp promotions
       3, p.corp_id
  from demo.projects p
 inner join veil2.scope_links s
    on s.project_id = p.project_id
union all
select 5, s.scope_id,   -- Project to org promotions
       4, p.org_id
  from demo.projects p
 inner join veil2.scope_links s
    on s.project_id = p.project_id;
      </programlisting>
    </para>
    <para>
      Note that if you have something like an organizational hierarchy
      in which you want someone that is assigned a role in an
      organizational context, to automatically have those rights in
      all subordinate organizational contexts, you will need to define
      scope promotions within that hierarchy.  This is done by the
      second query in the above union.
    </para>
    <para>
      Any time you redefine this view you should call 
      <literal><link
      linkend="func_init">veil2.init()</link></literal> to
      update the base definition and refresh the materialized views
      that depend on it.
    </para>
  </sect1>
  <sect1>
    <title>In Summary</title>
    <para>
      <itemizedlist>
	<listitem>
	  <para>
	    Define your custom <literal>my_superior_scopes</literal>
	    view.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Install the view and refresh matrialized views by calling
	    <literal><link
			 linkend="func_init">veil2.init()</link></literal>.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
  </sect1>
</chapter>
