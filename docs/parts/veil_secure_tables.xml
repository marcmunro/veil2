<sect1 id="secure_tables">
  <title>Secure Your Tables</title>
  <para>
    At last we get to secure something.
  </para>
  <para>
    Each of your user-facing relations should be secured.  Even if you
    think that *all* users should have access to something, it does
    little harm to secure it.  It makes for a more consistent
    implementation and it shows that the relation has not simply been
    forgotten.  The overhead of doing this is small.
  </para>
  <sect2>
    <title>Doing It</title>
    <para>
      Securing a table is pretty simple.  First you enable row
      level security for that table, and then you define policies on
      the table for select, insert, update and delete.  The following
      is the definition for the select policy on projects from the
      demo.  See STEP 9 in file <literal>demo/demo.sql</literal>.
      <programlisting>
alter table demo.projects enable row level security;

create policy projects__select
    on demo.projects
   for select
 using (   veil2.i_have_global_priv(21)
        or veil2.i_have_priv_in_scope(21, 3, corp_id)
        or veil2.i_have_priv_in_scope(21, 4, org_id)
        or veil2.i_have_priv_in_scope(21, 5, project_id));
      </programlisting>
    </para>
    <para>
      Note that we check for <literal>select projects</literal>
      privilege in four different ways.  This is because there are
      multiple ways that we could have been assigned the privilege.
      This still does not cover all eventualities though.  If you wish
      to allow someone with <literal>select projects</literal>
      privilege in an org scope for a superior org to the org
      that owns the project (ie you want to use the organizational
      hierarchy in your security model, then you can use
      <literal>veil2.i_have_priv_in_superior_scope(21, 5,
      project_id)</literal> in place of any or all of the non
      global-priv tests above.  Or you may choose to leave the
      existing tests and add the superior scope test.  This may give
      slightly better performance as you will only try the more
      expensive superior-scope test if none of the other tests
      succeed.
    </para>
    <para>
      Note that the demo only implements the select policy.
    </para>
  </sect2>
  <sect2>
    <title>The <literal>Veil2</literal> tables</title>
    <para>
      Each <literal>Veil2</literal> table is protected with a select
      privilege.  It is generally assumed that no-one will be granted
      direct access to <literal>Veil2</literal> tables, though this
      will not be the case if you use <literal>Veil2</literal>'s role
      implementation as the demo does.  In this case you should add
      whatever extra security policies and privileges you need.
    </para>
    <para>
      DO NOT GRANT ANY ACCESS OTHER THAN SELECT TO A
      <literal>VEIL2</literal> TABLE WITHOUT FIRST ADDING SUITABLE
      PRIVILEGES AND SECURITY POLICIES.
    </para>
  </sect2>
  <sect2>
    <title>In Summary</title>
    <para>
      Create and enable security policies for each user-facing table.
    </para>
  </sect2>
</sect1>
