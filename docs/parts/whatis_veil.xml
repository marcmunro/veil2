<chapter id="whatis">
  <title>What is <literal>Veil2</literal> And What Does It Provide?</title>
  <para>
    <literal>Veil2</literal> is a collection of database objects,
    written in C and SQL, that provides an implementation of roles,
    privileges, contexts, scopes and session management that can be
    used to secure your database with relatively little custom
    implementation work.
  </para>
  <para>
    It links to your database through functions, triggers and foreign
    keys, and provides fast, tested, mechanisms to identify, load and
    test a user's privileges in various scopes.
  </para>
  <para>
    It is important to realize at this point that
    <literal>Veil2</literal> is not a complete application or a
    product: it cannot be used stand-alone and can only be integrated
    into your database by careful work on your part.  You will need to
    define the links between <literal>Veil2</literal> and your
    database schema, and you will need to provide
    <literal>Veil2</literal> with customized functions and views to
    make this integration work.
  </para>
  <para>
    To aid in this, <literal>Veil2</literal> provides for
    user-provided views and functions to take precedence over the
    built-in system-provided ones.  This mechanism aims to provide
    maximum flexibility while still allowing <literal>Veil2</literal>
    to be distributed as a PostgreSQL extension.  This means that
    future <literal>Veil2</literal> bug-fixes and upgrades can be
    easily applied to your database without breaking your
    customizations.
  </para>
  <para>
    There is various documentation to help you with this:
    <itemizedlist>
      <listitem>this document, especially the setup sections starting
      <link linkend="setup">here</link>;</listitem>
      <listitem>comments in the database objects;</listitem>
      <listitem>comments in the <literal>Veil2</literal> creation
      scripts;</listitem> 
      <listitem>the (commented) <literal>Veil2</literal> demo.</listitem>
    </itemizedlist>
  </para>
  <para>
    You should familiarize yourself with at least this document and
    the <link linkend="veil_demo">demo</link> before starting out on
    your implementation.
  </para>
  <sect1>
    <title>How It Works - An Overview</title>
    <para>
      <literal>Veil2</literal> works by:
      <itemizedlist>
	<listitem>
	  ensuring the database knows which user is connected;
	</listitem>
	<listitem>
	  providing a set of contextual privileges to each user;
	</listitem>
	<listitem>
	  providing a fast means of testing a user's privileges;
	</listitem>
	<listitem>
	  individually securing each accessible relation using
	  privilege tests.
	</listitem>
      </itemizedlist>
    </para>
    <para>
      What this means is that when Alice tries to select the user
      record for Bob, Alice will only see that record if she has been
      assigned the necessary privilege to view Bob's user record in an
      appropriate scope.  As each user's privilege assignments will
      be different, each user will see a different subset of data.
    </para>
    <para>
      The following sections provide more detail on each of the above
      list items.
    </para>
    <sect2>
      <title>Knowing The User</title>
      <para>
	<literal>Veil2</literal> provides session management functions
	for both <link
	linkend="dedicated_session_management">dedicated</link> and
	<link linkend="shared_session_management">shared</link>
	database connections.  It is up to the user or the user's
	application to ensure that the session protocols are followed.
	If they are not, the user will have access to no data at all,
	or access to data based on another user's access rights.
      </para>
      <para>
	By calling the appropriate session management functions with
	appropriate authentication tokens, a <literal>Veil2</literal>
	session will be created.  This causes session parameters to be
	set up in secure temporary tables from which they can be
	quickly retrieved.  These session parameters include session
	privileges with one record for each scope in which the user
	has privileges.
      </para>
      <para>
	The set of privileges in each scope is stored in a single
	bitmap.  This is a space-efficient array of numbered bits,
	with each bit indicating the presence or absence of a
	privilege.  Tests for the presence of a privilege in a bitmap
	are very fast.
      </para>
    </sect2>
    <sect2>
      <title>Contextual Privileges Per User</title>
      <para>
	At the start of each session, the user's privileges are
	determined based upon the roles that have been assigned to
	them, and the contexts of those role assignments.  This is a
	highly optimized process, using pre-built bitmaps and
	materialized views.  These materialized views are
	automatically updated whenever role->role and role->privilege
	assignments are modified which should be relatively
	infrequently.
      </para>
      <para>
	Each privilege assigned to a user acts within a scope that
	depends on the context in which it was assigned.  Some
	scopes will allow all records in a table to be seen or
	manipulated, and some will allow large, small or smaller
	subsets of data to be seen.
      </para>
    </sect2>
    <sect2>
      <title>Fast Privilege Testing</title>
      <para>
	As stated above, the set of privileges in each scope is stored
	in a bitmap, and tests for the presence of a privilege in the
	bitmap are very fast.  The security rules for a relation will
	typically be defined something like this (from the demo):
	<programlisting id="table_security_example">
alter table demo.projects enable row level security;

create policy projects__select
    on demo.projects
   for select
 using (   veil2.i_have_global_priv(21)
        or veil2.i_have_priv_in_scope(21, 3, corp_id)
        or veil2.i_have_priv_in_scope(21, 4, org_id)
        or veil2.i_have_priv_in_scope(21, 5, project_id));
	</programlisting>
      </para>
      <para>
	Each of the test functions is checking whether the user has
	the privilege, <literal>select projects</literal> (privilege
	21), to view the current record.  Tests are made in global
	scope, then corp scope (scope type 3) of the owning corp, then
	org scope (scope type 4) of the owning org, and finally in
	project scope (scope type 5) of the project itself.  Each of
	these tests causes a different bitmap in the users session
	privileges to be checked.
      </para>
      <para>
	Although having so many tests performed for each record
	returned might seem like a significant overhead, in fact it is
	very small compared with the cost of retrieving the record in
	the first place and will often be effectively unmeasurable.
      </para>
      <para>
	Note that you should not rely solely on the VPD implementation
	to limit the number of records returned from a query to your
	user.  Your application should be constructing
	<literal>where</literal>-clauses that only return records that
	your user is entitled to see.  That is, your
	<literal>Veil2</literal> implementation should act as a final 
	back-stop safety check, and not as, a hidden, part of your
	system's functionality.
      </para>
      <para>
	There are 2 reasons for this:
	<orderedlist>
	  <listitem>
	    performance;
	    <para>
	      Relying on <literal>Veil2</literal> to filter unsuitable
	      records means that your <literal>where</literal>-clauses
	      are essentially incomplete, which in turn means that the
	      RDBMS has not been given all of the information that it
	      needs in order to best optimize your queries.
	    </para>
	    <para>
	      Furthermore, if <literal>Veil2</literal> is
	      filtering-out records from the result-set then we are
	      unnecessarily retrieving those records, and are having
	      to process them in order to determine their
	      unsuitability.  This would be a large and unncessary
	      overhead.
	    </para>
	  </listitem>
	  <listitem>
	    security.
	    <para>
	      If our queries are running slower than they should
	      because <literal>Veil2</literal> is having to filter-out
	      unsuitable records, it may be possible for an attacker
	      to use a timing attack to determine the existence of
	      records they are not entitled to see.
	    </para>
	    <para>
	      For the truly security conscious, you may want to modify
	      the privilege testing functions so that attempts to view
	      records to which you have no access, result in logs
	      being recorded.  Note though that such logs would be
	      essentially unusable and would become a significant
	      overhead, if significant numbers of queries required
	      results to be filtered.
	    </para>
	  </listitem>
	</orderedlist>
      </para>
    </sect2>
    <sect2>
      <title>Individually Securing Each Relation</title>
      <para>
	Every table and view is given its own individual security
	definition.  For tables, they will be much as shown <link linkend="table_security_example">above</link> but
	will include definitions for insert, update and delete as well
	as select.
      </para>
      <para>
	Views are secured in a similar way, but with the privilege
	testing functions defined in the view itself.  Sometimes using
	views can improve the performance of the privilege tests as
	they can be incorporated more deeply within the view, meaning
	that the tests do not have to be executed for every row used
	by the view's query.
      </para>
    </sect2>
  </sect1>
  <sect1>
    <title>Refactoring Your Systems To Use <literal>Veil2</literal></title>
    <para>
      Integrating your systems with <literal>Veil2</literal> is not a
      trivial task, but it is straightforward.  Once you have
      understood at least the <link linkend="veil2-concepts">core
      concepts</link>, you can simply follow the steps described in
      the <link linkend="setup">Setting Up A <literal>Veil2</literal>
      Virtual Private Database - Overview</link> section. 
    </para>
    <para>
      This section describes the major areas that you will need to
      address in order to protect an existing system with
      <literal>Veil2</literal>.  This is intended as an introduction
      to the process solely in order to give you a feel for what is
      required.  The process is covered in much more detail <link
      linkend="setup">later</link>.
    </para>
    <sect2>
      <title>Web Session Management</title>
      <para>
	The <literal>Veil2</literal>-protected database needs to know
	which user is accessing it all times.  It provides a
	session-management protocol for use from web applications.
	Your web application will have to provide handling of this
	session management protocol.  Generally this will be handled
	as triggers or hooks into the database connection pool
	management.
      </para>
    </sect2>
    <sect2>
      <title>Integration of Role Handling</title>
      <para>
	<literal>Veil2</literal> has its own view of what roles should
	do and what they should look like.  If your own system uses
	roles for its existing access control purposes, you will have
	to somehow integrate your system's role requirements with
	those of <literal>Veil2</literal>.  You essentially have three
	choices:
	<itemizedlist>
	  <listitem>
	    <para>
	      Bring your roles to <literal>Veil2</literal>. 
	    </para>
	    <para>
	      Make your roles the source of <literal>Veil2</literal>
	      roles.  Use triggers and Foreign Key (FK) constraints to
	      make and maintain copies of your roles within
	      <literal>Veil2</literal>.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Make <literal>Veil2</literal> the source of your
	      system's roles.
	    </para>
	    <para>
	      Update <literal>Veil2</literal>'s roles to handle whatever
	      extra data your system needs, and replace your existing
	      role objects with views onto the
	      <literal>Veil2</literal> roles.
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Refactor your system to only use
	      <literal>Veil2</literal> roles. 
	    </para>
	    <para>
	      The advantage of this is that you will end up with a
	      cleaner system, with fewer moving parts.  The downside
	      is that your applications will probably require more
	      refactoring.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </sect2>
    <sect2>
      <title>Integration of Security Contexts</title>
      <para>
	For every type of security context that you wish to provide,
	you will need to provide a link from your existing tables back
	to <literal>Veil2</literal>.  This will be handled with
	triggers and FK-constraints.  There are examples of how this
	may be done in the demo.
      </para>
    </sect2>
    <sect2>
      <title>Integration of Users</title>
      <para>
	All of your users must be associated with
	<literal>Veil2</literal> accessors (users who access your
	database), and any existing credentials must be migrated.
	Again this can be handled by triggers and FK-constraints, and
	the demo provides examples.
      </para>
    </sect2>
    <sect2>
      <title>Performance Denormalizations</title>
      <para>
	You will be applying access controls to each relation in your
	system.  Some of them may benefit from data denormalization to
	improve the performance of the security tests.  Typically you
	may want to add ownership columns to some of your tables so
	that ownership can be determined without the need for extra
	joins.  If an access control function has to perform extra
	queries for each row returned, performance is likely to
	suffer.
      </para>
    </sect2>
    <sect2>
      <title>Authentication</title>
      <para>
	You may need to implement a new authentication system for
	users.  Or the built-in <ulink
	url="https://en.wikipedia.org/wiki/Bcrypt">bcrypt</ulink>
	implementation may be enough. 
      </para>
    </sect2>
    <sect2>
      <title>Development/Tightening of Access Controls</title>
      <para>
	Once you have everything integrated, you will be able to use
	your system.  Create a super-role that allows all access and
	assign it to all of your users in the global context: your
	system will work exactly as it did before.  Now you can begin
	tightening your access controls.
      </para>
      <para>
	Create appropriate roles one function at a time and ensure
	that they have sufficient access to get the job done.  Assign
	these in the most restrictive security contexts possible and
	ensure that they work.  Check that they also work in
	higher-level contexts.  Remove any existing code that
	implements access controls for that functionality.  If all is
	well, remove those privileges from your super-role and ensure
	that everyone can still do their jobs.  Rinse and repeat.
      </para>
    </sect2>
  </sect1>
</chapter>
