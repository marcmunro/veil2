<extract>
<programlisting>
create table veil2.context_roles (
  role_id			integer not null,
  role_name			text not null,
  context_type_id	       	integer not null,
  context_id			integer not null
);

alter table veil2.context_roles add constraint context_role__pk
  primary key(role_id, context_type_id, context_id);

alter table veil2.context_roles add constraint context_role__name_uk
  unique(role_name, context_type_id, context_id);

alter table veil2.context_roles add constraint context_role__role_fk
  foreign key(role_id)
  references veil2.roles(role_id);

alter table veil2.context_roles add constraint context_role__context_fk
  foreign key(context_type_id, context_id)
  references veil2.scopes(scope_type_id, scope_id)
  on delete cascade on update cascade;

</programlisting>
<para>
This provides a context-based role-name for a role.  The purpose of
this is to allow certain security contexts to name their own roles.
This, coupled with role_roles, allows for role definitions to be
different in different contexts.  It is primarily aimed at VPDs where
there are completely independent sets of accessors.  For example in a
SaaS implementation where each corporate customer gets their virtual
private database and no customer can see any data for any other
customer.  In such a case it is likely that roles will be different,
will have different names, and different sets of roles will exist.
</para>
<para>
If this makes no sense to you, you probably have no need for it, so
don't use it.  If do choose to use, do so sparingly as it could lead to
great confusion.  No users other than global-context superusers should
ever see roles from more than one context.
</para>
</extract>
